<?php
defined('BASEPATH') OR exit('No direct script access allowed');

class Crest extends MY_Controller {

	/**
	 * Index Page for this controller.
	 *
	 * Maps to the following URL
	 * 		http://example.com/index.php/welcome
	 *	- or -
	 * 		http://example.com/index.php/welcome/index
	 *	- or -
	 * Since this controller is set as the default controller in
	 * config/routes.php, it's displayed at http://example.com/
	 *
	 * So any other public methods not prefixed with an underscore will
	 * map to /index.php/welcome/<method_name>
	 * @see https://codeigniter.com/user_guide/general/urls.html
	 */

	function __construct() {
		parent::__construct();
		$this->load->model('base_model');
		$this->load->library('ion_auth');
        $this->load->library('form_validation');

         $userid = $this->ion_auth->get_user_id();

		  if (is_numeric($userid)) {
          
             $result = $this->base_model->run_query("select * FROM  users where id=" . $userid);

                 
           $this->data['user_details'] = $result;

        }
        else
        {

        }

	}

	public function index()
	{


		$this->data['meta_description'] = 'CREST Olympiads is an online Olympiads for classes 1 to 10 which focuses on the practical knowledge of the student rather than theoretical knowledge.';
		$this->data['title'] = 'CREST Olympiads - Individual Online Olympiad Exams Registrations Open for Students';
		$this->data['active_menu'] = 'home';

		$this->data['categories'] = $this->base_model->get_details('categories');

		$this->data['content'] = "general/index";

		$this->load->model('Contact');
		$this->load->helper('captcha');

		

		$random_number = substr(number_format(time() * rand(), 0, '', ''), 0, 6);
        $vals = array(
            'word' => $random_number,
            'img_path' => './assets/captcha/',
            'img_url' => base_url() . 'assets/captcha/',
            'img_width' => 140,
            'img_height' => 32,
            'expiration' => 7200
        );
        $this->data['captcha'] = create_captcha($vals);
        $this->session->set_userdata('captchaWord', $this->data['captcha']['word']);

		

		$this->_render_page('templates/template', $this->data);
	}


	//Fetch products from DB
	public function category_page()
	{
		$slug = $this->uri->segment(1);

		if($slug!=''){
			$this->data['categories'] = $this->base_model->get_details('categories');
		
			$query = "SELECT * FROM `categories` WHERE `slug`='".$slug."'";
			$category = $this->db->query($query)->result_array();
			if (!$category){
			var_dump($query);
			exit();
				redirect(base_url());
			}

			$this->data['category'] = $category[0];

			$this->data['title'] = $category[0]['meta_title'];
			$this->data['meta_description'] = $category[0]['meta_description'];

			$this->data['content'] = "general/cat_page";
			$this->_render_page('templates/template', $this->data);

		}
		else{
			redirect(base_url());
		}
		
	}
	public function syllabus_pages()
	{
		$slug =  $this->uri->segment(1);


		if($slug!=''){
			$slug_array = explode('-', $slug);
			if($slug_array[1] != 'syllabus'){
				redirect(base_url());
			}
			$catslug = $slug_array[0];
			// echo $catslug;
			// exit();
			$this->data['categories'] = $this->base_model->get_details('categories');
		
			$query = "SELECT * FROM `categories` WHERE `slug`='".$catslug."'";
			$category = $this->db->query($query)->result_array();
			if (!$category){
				redirect(base_url());
			}

			$catid['catid'] = $category[0]['catid'];
			// var_dump($category[0]);
			// exit();

			$all_syllabus = $this->base_model->fetch_records_from('syllabus',$catid);

			$this->data['all_syllabus'] = $all_syllabus;
			$this->data['category'] = $category[0];

			$this->data['title'] = $category[0]['meta_title'];
			$this->data['meta_description'] = $category[0]['meta_description'];

			$this->data['title'] = $category[0]['name'].' - '.strtoupper($category[0]['short_cat']).' Syllabus for Classes 1 to 10';
			$this->data['meta_description'] = 'Find complete syllabus for '.strtoupper($category[0]['short_cat']).' exams for classes 1, 2, 3, 4, 5, 6, 7, 8, 9, 10';

			$this->data['content'] = "general/syllabus_page";
			$this->_render_page('templates/template', $this->data);

		}
		else{
			redirect(base_url());
		}
		# code...
	}

	public function sample_papers()
	{
		$slug =  $this->uri->segment(1);
		if($slug!=''){
			$slug_array = explode('-', $slug);
			if($slug_array[1] != 'sample' && $slug_array[1] != 'papers'){
				redirect(base_url());
			}
			$catslug = $slug_array[0];
			// echo $catslug;
			// exit();
			$this->data['categories'] = $this->base_model->get_details('categories');
		
			$query = "SELECT * FROM `categories` WHERE `slug`='".$catslug."'";
			$category = $this->db->query($query)->result_array();
			if (!$category){
				redirect(base_url());
			}

			$catid['catid'] = $category[0]['catid'];

			$all_syllabus = $this->base_model->fetch_records_from('syllabus',$catid);
			$query =   'SELECT s.worksheet_id, q.* FROM syllabus s INNER JOIN questions q ON s.worksheet_id = q.worksheet_id WHERE s.catid ='.$catid['catid'].' ORDER BY rand()';
			$questions = $this->db->query($query)->result();
			
			$all_questions = $questions;

			$this->data['all_syllabus'] = $all_syllabus;
			$this->data['category'] = $category[0];

			$this->data['title'] = $category[0]['name'].' - '.strtoupper($category[0]['short_cat']).' Sample Papers, '.strtoupper($category[0]['short_cat']).' Question Papers';
			$this->data['meta_description'] = 'Find complete preparation guide for '.strtoupper($category[0]['short_cat']).' exams through multiple sample papers, practice papers & mock test papers for classes 1, 2, 3, 4, 5, 6, 7, 8, 9, 10';

			$this->data['content'] = "general/sample_paper";
			$this->_render_page('templates/template', $this->data);

		}
		else{
			redirect(base_url());
		}
		# code...
	}
	public function sample_questions()
	{

		$slug =  $this->uri->segment(1);
		if($slug!=''){
			$slug_array = explode('-', $slug);
			if($slug_array[0] != 'sample' && $slug_array[1] != 'questions'){
				redirect(base_url());
			}
			$classid = $slug_array[2];
			// echo $catslug;
			// exit();
			// $this->data['categories'] = $this->base_model->get_details('categories');
		
			// $query = "SELECT * FROM `syllabus` WHERE `id`='".$classid."'";
			// $this_syllabus = $this->db->query($query)->result_array();

			$where['id'] = $classid;

			$this_syllabus = $this->base_model->fetch_records_from('syllabus',$where);
			if (!$this_syllabus){
				redirect(base_url());
			}
			$where_cat['catid'] = $this_syllabus[0]->catid;
			$this_category = $this->base_model->fetch_records_from('categories',$where_cat);

			$query =   'SELECT q.* FROM syllabus s INNER JOIN questions q ON s.worksheet_id = q.worksheet_id WHERE s.id ='.$classid.' ORDER BY rand()';
			$questions = $this->db->query($query)->result();
			
			$all_questions = $questions;

			$this->data['this_category'] = $this_category[0];
			$this->data['this_syllabus'] = $this_syllabus[0];
			$this->data['all_questions'] = $all_questions;

			$this->data['title'] = $this_category[0]->name.' Sample Questions for '.$this_syllabus[0]->name.' - CREST Olympiads';
			$this->data['meta_description'] = 'Find complete preparation guide for '.strtoupper($this_category[0]->short_cat).' exams through multiple sample questions for '.$this_syllabus[0]->name;

			$this->data['content'] = "general/sample_questions";
			$this->_render_page('templates/template', $this->data);

		}
		else{
			redirect(base_url());
		}
		# code...
	}


    function subject_questions(){

        $slug = '';
        $slug = $this->uri->segment(2);
        
        $title_of_pic = false;

        if ($slug != '') {

            $id = $slug;
            $picture_arr = $this->db->query("SELECT * FROM `sample_question_images` WHERE `slug`='" . $id . "' and `category` = 'superminds'")->row_array();
            if (!$picture_arr){
                redirect('superminds', 'refresh');
            }

            $next_picture_slug = $prev_picture_slug = '0';
            
            if($picture_arr['id'] < 53){
                $next_picture_id = $picture_arr['id']+1;
                $next_picture = $this->db->query("SELECT * FROM `sample_question_images` WHERE `id`='" . $next_picture_id . "'")->row_array();
                $next_picture_slug = $next_picture['slug'];
            }

            if($picture_arr['id'] > 21){
                $prev_picture_id = $picture_arr['id']-1;
                $prev_picture = $this->db->query("SELECT * FROM `sample_question_images` WHERE `id`='" . $prev_picture_id . "'")->row_array();
                $prev_picture_slug = $prev_picture['slug'];
            }

            // echo $prev_picture_slug.$next_picture_slug;
            // exit;

            $image_href     = base_url() . 'assets/games/superminds/'.$picture_arr['image'];
            $data_text      = $picture_arr['title'];
            $image_alt      = $picture_arr['alt'];
            //$data_text = "Amazing Facts which will blow your mind!";
            $fb_share_link       = "https://www.facebook.com/sharer/sharer.php?u=http%3A%2F%2Fwww.olympiadsuccess.in%2Fsuperminds%2F".$id."&amp;src=sdkpreparse";
            $fb_comment_box_link = base_url() . 'superminds/'.$id;

            $this->data = array('image_alt' => $image_alt,'slug' => $id,'data_text' => $data_text, 'image_href' => $image_href, 'whatsapp_url' => $fb_comment_box_link, 'fb_share_link' => $fb_share_link, 'fb_comment_box_link' => $fb_comment_box_link );
            
            $this->data['next_picture_slug'] = $next_picture_slug;
            $this->data['prev_picture_slug'] = $prev_picture_slug;


            $this->data['title'] = $picture_arr['title'];
            $this->data['meta_description'] = $picture_arr['description'];    
            $title_of_pic = true;
            
        }
        $all_pictures    = $this->db->query("SELECT * FROM `sample_question_images` WHERE `category`='superminds'");
        $this->data['all_pictures'] = $all_pictures;
        if($title_of_pic == false){        
            $this->data['title'] = 'Super Minds Puzzles for everybody!';
            $this->data['meta_description'] = 'Super Mind puzzles for your child can be found here';
        }
        
        $this->data['content'] = "breaktime/superminds";
        $this->_render_page('temp/template', $this->data);
    }
    


	public function cms_page()
	{
		
		$slug =  $this->uri->segment(1);

		// $route['exam-schedule'] = 'crest/cms_page';
		// $route['marking-scheme'] = 'crest/cms_page';
		// $route['cut-off-and-rankings'] = 'crest/cms_page';
		// $route['awards'] = 'crest/cms_page';

		if($slug!=''){
			if($slug == 'exam-schedule'){
				$this->data['title'] = 'Important Exam Dates & Schedule 2019-20 | CREST Olympiads';
				$this->data['meta_description'] = 'Check important exam dates and schedule for CREST Olympiads 2018-19.';

				$this->data['content'] = "cms_pages/exam_schedule";
			}
			else if($slug == 'marking-scheme'){
				$this->data['title'] = 'Exam Pattern and Marking Scheme | CREST Olympiads';
				$this->data['meta_description'] = 'CREST Olympiads has released the exam pattern and marking scheme for 2018-19 Olympiad exams.';

				$this->data['content'] = "cms_pages/marking_scheme";
			}
			else if($slug == 'cut-off-and-rankings'){
				$this->data['title'] = 'Cut Off and Ranking Criteria - CREST Olympiads';
				$this->data['meta_description'] = 'Know about cut off and ranking criteria for qualification in CEO, CRO, CMO, CFO, CGKO, CSO, CCO.';

				$this->data['content'] = "cms_pages/cut_off_and_rankings";
			}
			else if($slug == 'awards'){
				$this->data['title'] = 'Awards/Scholarships - CREST Olympiads';
				$this->data['meta_description'] = 'Know about awards or prizes in CEO, CRO, CMO, CFO, CGKO, CSO, CCO.';

				$this->data['content'] = "cms_pages/awards";
			}
			else if($slug == 'sample-papers'){
				$this->data['title'] = 'CREST Olympiads Sample Papers';
				$this->data['meta_description'] = 'Get latest Sample question Papers for CEO, CRO, CMO, CFO, CGKO, CSO, CCO.';

				$this->data['content'] = "cms_pages/sample_paper";
			}
			else if($slug == 'terms-of-use'){
				$this->data['title'] = 'CREST Olympiads Terms of Use';
				$this->data['meta_description'] = 'Terms of Use of CREST Olympiads';

				$this->data['content'] = "cms_pages/terms_of_use";
			}
			else if($slug == 'privacy-policy'){
				$this->data['title'] = 'CREST Olympiads Privacy Policy';
				$this->data['meta_description'] = 'Privacy Policy of CREST Olympiads';

				$this->data['content'] = "cms_pages/privacy_policy";
			}
			else{
				redirect(base_url());
			}

			$this->_render_page('templates/template', $this->data);

		}
		else{
			redirect(base_url());
		}
		# code...
	}
	public function contact(){

		$this->data['title'] = 'Contact Us';
		$this->data['active_menu'] = 'contact';

		
        // $vals = array(
        //     'word' => $random_number,
        //     'img_path' => './assets/captcha/',
        //     'img_url' => base_url() . 'assets/captcha/',
        //     'img_width' => 140,
        //     'img_height' => 32,
        //     'expiration' => 7200
        // );
        // $this->load->helper('captcha');
        // $this->data['captcha'] = create_captcha($vals);
        
        // $this->load->model('general_model');
        // $insert = array('page' => 'CONTACTUS', 'token' => $token, 'captcha_value' => $random_number, 
        //     'ip_address' => $_SERVER['REMOTE_ADDR'], 'createtime' => date('Y-m-d H:i:s'));
        // $this->general_model->saveCaptchaInDb($insert);
        
        
        
        // $this->session->set_userdata('captchaWord', $this->data['captcha']['word']);
        
		// $this->load->model('contact');
		$this->load->model('Contact');
		$this->load->helper('captcha');

		$this->form_validation->set_error_delimiters('<div class="error">', '</div>');
		$this->form_validation->set_rules('name_contact', 'Contact Person', 'required|min_length[3]|max_length[75]');
		$this->form_validation->set_rules('email_contact', 'Email', 'required|valid_email|max_length[75]');
		$this->form_validation->set_rules('phone_contact', 'Phone', 'required|max_length[20]');
		$this->form_validation->set_rules('message_contact', 'Message', 'max_length[300]');
		$this->form_validation->set_rules('userCaptcha', 'Captcha', 'required|callback_check_captcha');
        $userCaptcha = $this->input->post('userCaptcha');


		if ($this->form_validation->run()) {
			if ($this->input->post()) {
				// $data = $this->input->post();
				$name = $this->input->post('name_contact');
				$phone = $this->input->post('phone_contact');
				$email = $this->input->post('email_contact');
				$message = $this->input->post('message_contact');
				$query_type = $this->input->post('query_type');


	            /* Insert into database */
	            $insert = $mailParams = array('name' => $name, 'email' => $email , 'phone' => $phone,
	                    'message' => $message ,'query_type' => $query_type , 'ip_address' => $_SERVER['REMOTE_ADDR'],'date' => date('Y-m-d H:i:s'));

				// $data['date'] = date('d-m-Y H:i:s');
				$intLastInsertId = $this->Contact->add($insert);

				if(!empty($intLastInsertId)) {

                	$this->load->model('Emails_model');
	                if(!$this->Emails_model->sendContactUsMail($email, $mailParams)) {
	                    //$response = array('success' => false, 'message' =>'');exit;
						$this->session->set_flashdata('success_message', 'Thanks! We\'ll get back to you as soon as possible.');
	                }
				} else {
					$this->session->set_flashdata('error_message', 'It seems some problem has occured, Please contact us at '.$this->config->item('support_phone').'.',1);
				}
			}
		}

		$random_number = substr(number_format(time() * rand(), 0, '', ''), 0, 6);
        $vals = array(
            'word' => $random_number,
            'img_path' => './assets/captcha/',
            'img_url' => base_url() . 'assets/captcha/',
            'img_width' => 140,
            'img_height' => 32,
            'expiration' => 7200
        );
        $this->data['captcha'] = create_captcha($vals);
        $this->session->set_userdata('captchaWord', $this->data['captcha']['word']);

		$this->data['content'] = "general/contact_us";
		$this->_render_page('templates/template', $this->data);
	}

	public function pre_registration_form(){

		// $this->data['title'] = 'Contact Us';
		// $this->data['active_menu'] = 'contact';

		// // $this->load->model('contact');
		// $this->load->model('Contact');

		$this->form_validation->set_error_delimiters('<div class="red-text" style="position:absolute;">', '</div>');
		$this->form_validation->set_rules('name', 'Contact Person', 'required|min_length[3]|max_length[75]');
		$this->form_validation->set_rules('email', 'Email', 'required|valid_email|max_length[75]');
		$this->form_validation->set_rules('phone', 'Phone', 'required|max_length[20]');
		$this->form_validation->set_rules('school', 'School', 'required');
		$this->form_validation->set_rules('class', 'Class', 'required');

		$this->data['content'] = "general/reg_form";

		$user_registered = false;
		if ($this->form_validation->run()) {
			if ($this->input->post()) {
				$email = $data['email'] = $this->input->post('email');
				
				if( $this->base_model->fetch_records_from('users',$data) ){
					$user_registered = true;
					$res = $this->base_model->fetch_records_from('users',$data);
					$this->data['this_user'] = $res[0];
					$this->session->set_flashdata('error_message', 'You have already registered with this email id.',1);
					$this->data['content'] = "general/reg_form";
				
				}
				else{
					$phone = $data['phone'] = $this->input->post('phone');
					$name = $data['username'] = $this->input->post('name');
					$class = $data['class'] = $this->input->post('class');
					$school = $data['school'] = $this->input->post('school');
					$subjects = $data['prefered_subject'] = $this->input->post('subjects');
					$data['date_of_registration'] = date("Y-m-d H:i:s");
            		$data['ip_address'] = $_SERVER['REMOTE_ADDR'];
            		$data['register_from_page'] = 'home_page';

		            /* Insert into database */
		            $mailParams = array('name' => $name, 'email' => $email , 'phone' => $phone,
	                    'subjects' => $subjects, 'class' => $class, 'school' => $school);

                	$this->load->model('Emails_model');
                	if($user_registered == false){
						
						$intLastInsertId = $this->base_model->insert_operation_id('users', $data);
                		if(!$this->Emails_model->sendSignupMail($email, $mailParams)) {
		                	// $this->session->set_flashdata('success_message', 'Thanks! We\'ll get back to you as soon as possible.');
		                }
                	}
					// var_dump($subjects);
					// exit();
					// $data[''] = $this->input->post();
					// $data['date'] = date('d-m-Y H:i:s');
					
					// $intLastInsertId = $this->Contact->add($data);

					if(!empty($intLastInsertId)) {
						// $this->session->set_flashdata('success_message', 'Thanks! We\'ll contact you soon.');
						$res = $this->base_model->fetch_records_from('users',$data);
						$this->data['this_user'] = $res[0];
						$this->data['content'] = "general/reg_form";
					} else {
						$this->session->set_flashdata('error_message', 'It seems some problem has occured, Please contact us at '.$this->config->item('support_phone'),1);
						$this->data['content'] = "errors/general";
					}
					
					// $this->session->set_flashdata('error_message', 'You have already registered with this email id.',1);
				}
			}
		}
		// redirect(base_url());
		$this->_render_page('templates/template', $this->data);
	}
	public function buy_more_subjects(){

		if($this->input->post()){
			// $email = $this->input->post('email');
			$user_id = $this->input->post('user_id');
			$subjects = $this->input->post('subjects');
			$amount = $this->input->post('amount');

			$this->session->set_userdata('user_id', $user_id);
			$this->session->set_userdata('subjects', $subjects);
			$this->session->set_userdata('amount', $amount);
			// var_dump($this->input->post());
			// exit();
			redirect('crest/payment/ccavenue/');
		}
		else{
			redirect('already_paid');
		}
		

	}
	public function chk_reg()
	{

		$this->form_validation->set_error_delimiters('<div class="red-text" style="position:absolute;">', '</div>');
		$this->form_validation->set_rules('email', 'Email', 'required|valid_email');

		$this->data['content'] = "general/check_registration";
		if($this->input->post()){
			if($this->input->post('email')){
				$chk_user['email'] = $this->input->post('email');
				//registered user
				// 	1.unpaid
				//	2.paid - full - partial
				if( $this->base_model->fetch_records_from('users',$chk_user) ){
					// $user_registered = true;
					$res = $this->base_model->fetch_records_from('users',$chk_user);
					$this->data['this_user'] = $res[0];
					$where['user_id'] = $res[0]->id;
					$where['cc_order_status'] = 'Success';
					// $subjects = $res[0]->prefered_subject;
					$paid_user_chk = $this->base_model->fetch_records_from('payments',$where);
					// var_dump($paid_user_chk);
					// exit();

					$where1['user_id']=$res[0]->id;

					$user_transaction_details = $this->base_model->fetch_records_from('user_transaction_details',$where1);

					$this->data['wallet_amount'] = $user_transaction_details[0]->wallet_amount;

					//user has already paid
					if($paid_user_chk){
						$amount = $paid_user_chk[0]->cc_amount;
						$subjects = $paid_user_chk[0]->subjects;
						// $pre_subjects = $this->config->item('main_categories');
						// $purchased_subjects = '';
						// $not_purchased_subjects = '';
						// foreach ($pre_subjects as $subj) {
						// 	if(strpos($subjects, $subj[1]) > -1){
						// 		//this subject is already purchased
						// 		$purchased_subjects .= $subj[1].",";

						// 	}else{
						// 		//these subjects aren't purchased
						// 		$not_purchased_subjects .= $subj[1].",";
						// 	}
						// }
						// // var_dump($purchased_subjects);
						// $not_purchased_subjects_ar = explode(',',$not_purchased_subjects);
						// if(count($not_purchased_subjects_ar) > 0){
						// // var_dump($not_purchased_subjects);
						// 	$this->data['not_subjects'] = $not_purchased_subjects;
						// }
						// echo $this->data['not_subjects'];
						// exit();
            			$this->session->set_userdata('user_id', $res[0]->id);
            			$this->session->set_userdata('subjects', $subjects);
            			$this->session->set_userdata('amount', $amount);
						// redirect('pay/ccavenue');
						$this->session->set_flashdata('error_message', 'You have already paid and registered with this email id.',1);
						
						redirect('already_paid');
						// $this->data['content'] = "buy/already_paid";
					}else{
						//user has not paid but registered partially
						$this->data['content'] = "general/reg_form";
						
					}

				
				}else{
					//new user
					$this_user = (object)[];
					$this_user->email = $this->input->post('email');
					$this->data['email'] = $this_user;
					$this->data['content'] = "general/reg_form";

				}
			}
		}
		
		
		$this->_render_page('templates/template', $this->data);

		
	}
	public function already_paid()
	{
		$user_id = $data['id'] = $this->session->userdata('user_id');
		if( !isset($user_id) ){
			redirect('registration');
		}
		$where_id['user_id'] = $user_id;
    	$paid_res = $this->base_model->fetch_records_from('payments',$where_id);
    	$subjects = $paid_res[0]->subjects;
		$pre_subjects = $this->config->item('main_categories');
		$purchased_subjects = '';
		$not_purchased_subjects = '';
		foreach ($pre_subjects as $subj) {
			if(strpos($subjects, $subj[1]) > -1){
				//this subject is already purchased
				$purchased_subjects .= $subj[1].",";

			}else{
				//these subjects aren't purchased
				$not_purchased_subjects .= $subj[1].",";
			}
		}
		// var_dump($purchased_subjects);
		$not_purchased_subjects_ar = explode(',',$not_purchased_subjects);
		if(count($not_purchased_subjects_ar) > 0){
		// var_dump($not_purchased_subjects);
			$this->data['not_subjects'] = $not_purchased_subjects;
		}

    	$res = $this->base_model->fetch_records_from('users',$data);
        $this->data['this_user'] = $res[0];
		$this->data['content'] = "buy/already_paid";
		$this->_render_page('templates/template', $this->data);
		# code...
	}

	public function checkUserEmail(){
		
		if ($this->input->post()) {
			
				$where['email']  =  $this->input->post('email');
				

				$res = $this->base_model->fetch_records_from('users',$where);
				


				//already pre-registered user
				if(count($res)==1 ){
					echo "0";
					

					// $this->data['content'] = "general/reg_form";

					
			}else{
				echo "1";
				// var_dump($this->input->post());
				//$this->data['content'] = "general/reg_form";		
			}
	
		// redirect(base_url());
		//$this->_render_page('templates/template', $this->data);
		}
	  
	}

	public function checkReferralcode(){
		
		if ($this->input->post()) {
			
				$where['email !=']  =  $this->input->post('email');
				$where['referral_code'] = $this->input->post('referral_code');
				$where['referral_code_status !='] = 0;


				
				

				$res = $this->base_model->fetch_records_from('users',$where);
				


				//already pre-registered user
				if(count($res)<1 ){
					echo "0";
					

					// $this->data['content'] = "general/reg_form";

					
			}else{
				echo "1";
				// var_dump($this->input->post());
				//$this->data['content'] = "general/reg_form";		
			}
	
		// redirect(base_url());
		//$this->_render_page('templates/template', $this->data);
		}
	  
	}

	   public function create_referral_code($username) {

	   			$uname=strtoupper($username);
	   			$name = substr(str_replace(" ", "", $uname),0,4);
                
                $permitted_chars = '123456789';
				// Output: g6swmAP8X5VG4jCi
				$code=substr(str_shuffle($permitted_chars), 0, 4);
					// ini_set('display_errors', 1); 

				$referral_code=$name.$code;
           

			 	$refer_code_query = "SELECT referral_code FROM users where referral_code='".$referral_code."'";
				 
				$referral_code_query = $this->db->query($refer_code_query);

				 

                
                if($referral_code_query->num_rows() > 0) {
                    $this->create_referral_code();
                }else{
                    return $referral_code;
                }
                
            }

	public function reg_form(){

		$this->data['title'] = 'Registration For Individual';
		$this->data['active_menu'] = 'registration';

		// // $this->load->model('contact');
		// $this->load->model('Contact');
		$this->config->load('ion_auth', TRUE);

		$this->form_validation->set_error_delimiters('<div class="red-text" style="position:absolute;">', '</div>');
		$this->form_validation->set_rules('email', 'Email', 'required|valid_email');
		$this->form_validation->set_rules('name', 'Student Name', 'required');
		$this->form_validation->set_rules('father_mother_guardian_name', 'Father/Mother Guardian Name', 'required');
		$this->form_validation->set_rules('dob', 'Date of Birth', 'required');
		$this->form_validation->set_rules('phone', 'Phone', 'required');
		$this->form_validation->set_rules('country', 'Country', 'required');
		$this->form_validation->set_rules('password', 'Password', 'required');
		// $this->form_validation->set_rules('country_code', 'Country Code', 'required');
		// $this->form_validation->set_rules('phone', 'Phone', 'required');
		// $this->form_validation->set_rules('amount', 'Amount', 'required');

		$user_registered = false;
		if ($this->input->post()) {
			if ($this->form_validation->run()) {
				$email = $data['email'] = $this->input->post('email');
				$amount = $this->input->post('amount');
				$subjects = $this->input->post('subjects');



				

				$res = $this->base_model->fetch_records_from('users',$data);

				//already pre-registered user
				if( $res ){

					// $this->data['content'] = "general/reg_form";

					$user_registered = true;
					
					
					$this->data['this_user'] = $res[0];
					$where['user_id'] = $res[0]->id;
					$where['cc_order_status'] = 'Success';
					// $subjects = $res[0]->prefered_subject;
					$paid_user_chk = $this->base_model->fetch_records_from('payments',$where);
					// var_dump($paid_user_chk);
					// exit();
					// if($paid_user_chk){
					// 	$amount = $paid_user_chk[0]->cc_amount;
					// 	$subjects = $paid_user_chk[0]->subjects;
     //        			$this->session->set_userdata('user_id', $res[0]->id);
     //        			$this->session->set_userdata('subjects', $subjects);
     //        			$this->session->set_userdata('amount', $amount);
					// 	// redirect('pay/ccavenue');
					// 	$this->session->set_flashdata('error_message', 'You have already paid and registered with this email id.',1);
					// 	redirect("already_paid");
					// }else{

            			$this->session->set_userdata('user_id', $res[0]->id);
            			$this->session->set_userdata('subjects', $subjects);
            			$this->session->set_userdata('amount', $amount);
						$this->data['content'] = "buy/invoice";
						// $this->data['content'] = "general/reg_form";
						
					// }

					if( $res[0]->prefered_subject != $subjects ){
						$new_input_data['father_mother_guardian_name'] = $this->input->post('father_mother_guardian_name');
						$new_input_data['dob'] = $this->input->post('dob');
						$new_input_data['school_address'] = $this->input->post('school_address');
						$new_input_data['home_address'] = $this->input->post('home_address');
						$new_input_data['city'] = $this->input->post('city');
						$new_input_data['state'] = $this->input->post('state');
						$new_input_data['country'] = $this->input->post('country');
						$new_input_data['country_code'] = $this->input->post('country_code');
						$new_input_data['pincode'] = $this->input->post('pincode');
						$new_input_data['prefered_subject'] = $subjects;
						// $new_input_data['subjects'] = $this->input->post('subjects');
						$where = array("id" => $res[0]->id);
						$res_update_q = $this->base_model->update_operation($new_input_data, 'users',$where);
						// echo $this->db->last_query();
						// exit();
					}

					$referral_code=$this->input->post('referral_code');


					if($referral_code!='')
					{

					
					// $subjects = $res[0]->prefered_subject;

					$table = $this->db->dbprefix('users');

					
		            $where['referral_code'] = $this->input->post('referral_code');

		            $user_details = $this->base_model->fetch_records_from($table,$where);


		            $referrer_id=$user_details[0]->id; 


		            
		            // echo $this->db->last_query();die;

					}

					else
					{

						$referrer_id="";
					}

					  $this->session->set_userdata('referrer_id', $referrer_id);

						// $transaction_date=date('Y-m-d H:i:s');
						// $transaction_status=0;

						// $table = $this->db->dbprefix('user_transaction_details');

						// $where1 = array("user_id" => $res[0]->id);

						// $transaction_details = $this->base_model->fetch_records_from($table,$where1);

						// $wallet_amount=$this->input->post('wallet_amount');

						// $max_wallet_amount=$transaction_details[0]->max_wallet_amount+$amount;

						// $wallet_amount=$transaction_details[0]->wallet_amount-$wallet_amount;


						// $transactionParams = array('user_id' => $res[0]->id, 'referrer_id' => $referrer_id ,'preferred_subjects' => $subjects, 'max_wallet_amount' => $max_wallet_amount, 'wallet_amount' => $wallet_amount,'transaction_date' => $transaction_date,'transaction_status' => $transaction_status);

						

						// $transaction_Details = $this->base_model->update_operation($transactionParams,$table,$where1);

					  if($amount>0 && ($amount>$user_details[0]->wallet_amount))
					  {

					  	// $amount1=$amount-$user_details[0]->wallet_amount;
					  	$this->session->set_userdata('amount', $amount);

						redirect('pay/ccavenue');

					}

					//else if($amount>0 && ($amount<$user_details[0]->wallet_amount))
					else if($amount<0)
					{

						$where1['user_id']=$res[0]->id;

            $order_by="id DESC";

            $limit=1;

           $user_transaction_details = $this->base_model->fetch_records_from('user_transaction_details',$where1,"*",$order_by,$limit);

           // echo $this->db->last_query();die;

         
           				$subjects=rtrim($subjects,',');

           				// $SubjectsArray=explode(',', $subjects);

           				// $preferred_subjects = end($SubjectsArray);


						$transaction_date=date('Y-m-d H:i:s');
						$transaction_status=1;

						$referrer_id=0;
						$final_amount = trim($amount, '-');
						//$transaction_amount=$final_amount;
						$max_wallet_amount= $user_transaction_details[0]->max_wallet_amount-$final_amount;

						
						
						$wallet_amount=$user_transaction_details[0]->wallet_amount-$final_amount;

						 $table1 = $this->db->dbprefix('user_transaction_details');
						


							$transactionParams = array('user_id' => $res[0]->id, 'referrer_id' => 0 ,'preferred_subjects' => $subjects, 'transaction_amount' => 0, 'max_wallet_amount' => $max_wallet_amount, 'wallet_amount' => $wallet_amount,'transaction_date' => $transaction_date,'transaction_status' => $transaction_status);

						

						$this->base_model->insert_operation($table1,$transactionParams);

					}

					else

					{

						 $where1['user_id']=$res[0]->id;

            $order_by="id DESC";

            $limit=1;

           $user_transaction_details = $this->base_model->fetch_records_from('user_transaction_details',$where1,"*",$order_by,$limit);

           // echo $this->db->last_query();die;

         
           				$subjects=rtrim($subjects,',');

           				// $SubjectsArray=explode(',', $subjects);

           				// $preferred_subjects = end($SubjectsArray);


						$transaction_date=date('Y-m-d H:i:s');
						$transaction_status=1;

						$referrer_id=0;
						$transaction_amount=$amount;
						$max_wallet_amount= 0;
						$wallet_amount=0;

						 $table1 = $this->db->dbprefix('user_transaction_details');
						


							$transactionParams = array('user_id' => $res[0]->id, 'referrer_id' => 0 ,'preferred_subjects' => $subjects, 'transaction_amount' => $transaction_amount, 'max_wallet_amount' => $max_wallet_amount, 'wallet_amount' => $wallet_amount,'transaction_date' => $transaction_date,'transaction_status' => $transaction_status);

						

						$this->base_model->insert_operation($table1,$transactionParams);
					}

					$this->data['content'] = "buy/success_registration";
				
				}
				else{
					//it's a new user

					$referral_code=$this->input->post('referral_code');
					if($referral_code!='')
					{
					
					// $subjects = $res[0]->prefered_subject;

					$table = $this->db->dbprefix('users');

		            $where['referral_code'] = $this->input->post('referral_code');

		            $user_details = $this->base_model->fetch_records_from($table,$where);

		            // $updateStatus=  array('referral_code_status' => 0,'wallet'=>$user_details[0]->package_amount);

		            $referrer_id=$user_details[0]->id;
		           
		            // $this->base_model->update_operation($updateStatus, $table, $where);


		            // echo $this->db->last_query();die;

		           /* $table1 = $this->db->dbprefix('user_transaction_details');

						$where1 = array("user_id" => $referrer_id);

						$transaction_details = $this->base_model->fetch_records_from($table1,$where1);

						 //print_r($transaction_details);die;


						//$wallet_amount=$this->input->post('wallet_amount');

						//$max_wallet_amount=$transaction_details[0]->max_wallet_amount;

						if ($transaction_details[0]->wallet_amount<$transaction_details[0]->max_wallet_amount) {
							# code...

							$referer_wallet_amount=$transaction_details[0]->wallet_amount+225;
						}

						else

						{
							$referer_wallet_amount=$transaction_details[0]->wallet_amount;
						}



						$transaction_params = array('wallet_amount' => $referer_wallet_amount);

						

						$this->base_model->update_operation($transaction_params,$table1,$where1);*/




					}

					else
					{
						$referrer_id="";
					}

					  $this->session->set_userdata('referrer_id', $referrer_id);

            		 
					$name = $data['username'] = $this->input->post('name');
					$phone = $data['phone'] = $this->input->post('phone');
					$class = $data['class'] = $this->input->post('class');
					$school = $data['school'] = $this->input->post('school');
					$subjects = $data['prefered_subject'] = $this->input->post('subjects');
					$data['date_of_registration'] = date("Y-m-d H:i:s");
            		$data['ip_address'] = $_SERVER['REMOTE_ADDR'];
					
					$data['father_mother_guardian_name'] = $this->input->post('father_mother_guardian_name');
					$data['dob'] = $this->input->post('dob');
					$data['school_address'] = $this->input->post('school_address');
					$data['home_address'] = $this->input->post('home_address');
					$data['city'] = $this->input->post('city');
					$data['state'] = $this->input->post('state');
					$data['country'] = $this->input->post('country');
					$data['country_code'] = $this->input->post('country_code');
					$data['pincode'] = $this->input->post('pincode');
					$data['active'] = 1;

					$data['referral_code'] = $this->create_referral_code($name);

					$user_password=$this->input->post('password');
				$this->load->model('ion_auth_model');

                $data['password'] = $this->ion_auth_model->hash_password($user_password);


					$amount = $this->input->post('amount');
        			$this->session->set_userdata('amount', $amount);
        		
        			$this->data['this_user'] = (object) $data;

		            /* Insert into database */
		            $mailParams = array('name' => $name, 'email' => $email , 'phone' => $phone,
	                    'subjects' => $subjects, 'class' => $class, 'school' => $school);

                	$this->load->model('Emails_model');
                	if($user_registered == false){
						
						$intLastInsertId = $this->base_model->insert_operation_id('users', $data);

					/*	$transaction_date=date('Y-m-d H:i:s');
						$transaction_status=0;


						 $transactionParams = array('user_id' => $intLastInsertId, 'referrer_id' => $referrer_id ,'preferred_subjects' => $subjects, 'max_wallet_amount' => $amount, 'wallet_amount' => 0,'transaction_date' => $transaction_date,'transaction_status' => $transaction_status);

						 $transaction_Details = $this->base_model->insert_operation('user_transaction_details', $transactionParams);*/

                		if(!$this->Emails_model->sendSignupMail($email, $mailParams)) {
		                	// $this->session->set_flashdata('success_message', 'Thanks! We\'ll get back to you as soon as possible.');
		                }
                	}

					if(!empty($intLastInsertId)) {
            			$this->session->set_userdata('user_id', $intLastInsertId);
            			$this->session->set_userdata('subjects', $subjects);
            			// $this->data['this_user'] = $data;
            			// var_dump($this->data['this_user']);
            			// exit();
            			$this->data['content'] = "buy/invoice";
            			// $this->disableLayout("buy/invoice");
						 redirect('pay/ccavenue');
						$this->session->set_flashdata('success_message', 'Thanks! We\'ll contact you soon.');
					} else {

						$this->session->set_flashdata('error_message', 'It seems some problem has occured, Please contact us at '.$this->config->item('support_phone'),1);
					}
					// $this->data['content'] = "buy/success_registration";
				}
			}else{
				// var_dump($this->input->post());
				$this->data['content'] = "general/reg_form";		
			}
		}else{
			// echo "no input";
			

			if ($this->ion_auth->logged_in()) {
			 $userid = $this->ion_auth->get_user_id();
                            if (is_numeric($userid)) {
                                $result = $this->base_model->run_query("select * FROM  users where id=" . $userid);

			$chk_user['email'] = $result[0]->email;
			$chk_user_details['user_id'] = $userid;
			

                                    $res = $this->base_model->fetch_records_from('users',$chk_user);
                                     $res2 = $this->base_model->fetch_records_from('user_transaction_details',$chk_user_details);

                                    


                                     $res2 = $this->base_model->run_query("SELECT GROUP_CONCAT(preferred_subjects SEPARATOR ',') as subjects FROM user_transaction_details WHERE user_id= ".$userid." and preferred_subjects!='0'");

                                


                                    $this->data['this_user'] = $res[0];
                                    if(count($res2)>0)
                                     {
                                     	 $this->data['this_user_details'] = $res2[0];
                                     }

                                    $where1['user_id']=$res[0]->id;

                    //$user_transaction_details = $this->base_model->fetch_records_from('user_transaction_details',$where1);

            $order_by="id DESC";

            $limit=1;
                    $user_transaction_details = $this->base_model->fetch_records_from('user_transaction_details',$where1,"*",$order_by,$limit);

           // echo $this->db->last_query();die;

           $this->data['wallet_amount'] = $user_transaction_details[0]->wallet_amount;

                    $this->data['wallet_amount'] = $user_transaction_details[0]->wallet_amount;
                }

            }

			$this->data['content'] = "general/reg_form";		

			// exit();
		}
		// redirect(base_url());
		$this->_render_page('templates/template', $this->data);
	}

	public function reward_points(){

		if (!$this->ion_auth->logged_in()) {

		 	 redirect('auth/login', 'refresh');

		 }

		$this->data['title'] = 'Reward Points';
		$this->data['active_menu'] = 'reward_points';
			

		 $userid = $this->ion_auth->get_user_id();

		  if (is_numeric($userid)) {
          
            $where1['user_id']=$userid;
            $where2['id']=$userid;

            $order_by="id DESC";

            $limit=1;

           $user_transaction_details = $this->base_model->fetch_records_from('user_transaction_details',$where1,"*",$order_by,$limit);

           // echo $this->db->last_query();die;

           $user_details = $this->base_model->fetch_records_from('users',$where2);

           $this->data['wallet_amount'] = $user_transaction_details[0]->wallet_amount;
           $this->data['referral_code'] = $user_details[0]->referral_code;

        }

        $this->data['content'] = "general/reward_points";



		$this->_render_page('templates/template', $this->data);

	}

	public function admit_card(){

		if (!$this->ion_auth->logged_in()) {

		 	 redirect('auth/login', 'refresh');

		 }

		$this->data['title'] = 'Access Card';
		$this->data['active_menu'] = 'admit_card';
			

		 $userid = $this->ion_auth->get_user_id();

		  if (is_numeric($userid)) {
          
             $result = $this->base_model->run_query("select * FROM  users where id=" . $userid);

           $this->data['username'] = $result[0]->email;
           $this->data['password'] = "user1234";           
           $this->data['subject'] = $result[0]->prefered_subject;

        }

        $this->data['content'] = "general/admit_card";



		$this->_render_page('templates/template', $this->data);

	}

	public function invoice(){

		if (!$this->ion_auth->logged_in()) {

		 	 redirect('auth/login', 'refresh');

		 }

		$this->data['title'] = 'Invoice';
		$this->data['active_menu'] = 'invoice';
			

		 $userid = $this->ion_auth->get_user_id();

		  if (is_numeric($userid)) {
          
           $where1['user_id']=$userid;
           $where1['transaction_amount !=']=0;
          // $where1['preferred_subjects' !=]=0;


           $user_transaction_details = $this->base_model->fetch_records_from('user_transaction_details',$where1);

           $this->data['invoice'] = $user_transaction_details;

        }

        $this->data['content'] = "general/invoice";



		$this->_render_page('templates/template', $this->data);

	}

	 public function save_download()
  { 
		ob_clean();
		
		//load mPDF library
		$this->load->library('pdf');
		//load mPDF library


		//now pass the data//
		 // $this->data['title']="Invoice";
		 // $this->data['description']="Invoice Details";
		// $this->data['description']="$this->official_copies";
		 //now pass the data //

		  $userid = $this->ion_auth->get_user_id();

	/*	  if (is_numeric($userid)) {*/
          
           $where1['user_id']=$userid;
           $where1['id']=$_GET['id'];

           $user_transaction_details = $this->base_model->fetch_records_from('user_transaction_details',$where1);

           // $this->data['invoice'] = $user_transaction_details;

      /*  }*/
 
		
		//$html=$this->load->view('general/invoice',$this->data, true); //load the pdf_output.php by passing our data and get all data in $html varriable.
 	 
		//this the the PDF filename that user will get to download
		$pdfFilePath ="invoice".time().".pdf";

	
		$html="<img src='".base_url()."assets/images/logo/logo.png'>";
		$html.="&emsp;&emsp;&emsp;&emsp;&emsp;<b class='title'><u>INVOICE</u></b>";
		$html.="&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;
		&emsp;<b class='date'>Date: ".date('d-m-Y')."</b>";
		$html.="<br><br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;
		&emsp;&emsp;&emsp;
		&emsp;&emsp;&emsp;
		&emsp;&emsp;&emsp;
		&emsp;&emsp;&emsp;
		&emsp;&emsp;&emsp;
		&emsp;&emsp;&emsp;
		&emsp;&emsp;&emsp;
		&emsp;&emsp;&emsp;&emsp;
		&emsp;&nbsp;&nbsp;<b class='invoice_no'>Invoice No: 2019/".$userid."</b>";
		$html.="<br><br><br>";
		$html.="<b>CREST OLYMPIADS</b><br>";
		$html.="<b>(a venture of Assessment Square)</b><br>";
		$html.="<b>Tower B4, 1110-B</b><br>";
		$html.="<b>Spaze IT Park, Sohna Road</b><br>";
		$html.="<b>Sector 49, Gurgaon</b><br>";
		$html.="<b>Haryana - 122018</b><br>";
		
		$html.="<hr><br>";
		$html.="<table border=1 cellspacing=0 cellpadding=20 class='invoice_details'>
			<thead>
	    	
	    	<tr>
			<th>Particulars</th>
			<th>Amount Due</th>
			<th>Amount Paid</th>							
			<th>Wallet Used</th>
			<th>Transaction Date</th>
			</thead>
			</tr>
			<tbody>						
			<tr>";
		$html.=	"<td style='text-align:center'>".rtrim($user_transaction_details[0]->preferred_subjects,",")."</td>
			<td style='text-align:center'>".$user_transaction_details[0]->transaction_amount."</td>
			<td style='text-align:center'>".$user_transaction_details[0]->transaction_amount."</td>		
			<td style='text-align:center'>".$user_transaction_details[0]->wallet_amount."</td>
			<td style='text-align:center'>".date('d-m-Y', strtotime($user_transaction_details[0]->transaction_date))."</td>";

			$html.="</tr></tbody></table>";

		
// print_r($html);die;



		
		//actually, you can pass mPDF parameter on this load() function
		$pdf = $this->pdf->load();

		
		//generate the PDF!
		$external_css=base_url()."assets/css/pdf.css";
		$stylesheet = file_get_contents($external_css); // external css
		$pdf->WriteHTML($stylesheet,1);
		$pdf->WriteHTML($html,2);
		//offer it to user via browser download! (The PDF won't be saved on your server HDD)
		
		ob_end_flush();
		ini_set('display_errors', 0);
		$pdf->Output($pdfFilePath, "I");
		 
		 	
  }

	public function profile(){

		 if (!$this->ion_auth->logged_in()) {

		 	 redirect('auth/login', 'refresh');

		 }

		$this->data['title'] = 'Profile';
		$this->data['active_menu'] = 'profile';
			

		 $userid = $this->ion_auth->get_user_id();

		  if (is_numeric($userid)) {
          
        


           $chk_user['id'] = $userid;
           $res = $this->base_model->fetch_records_from('users',$chk_user);
           $this->data['this_user'] = $res[0];

        }

        $this->data['content'] = "general/profile";



		$this->_render_page('templates/template', $this->data);

	}

	public function update_password(){

		if (!$this->ion_auth->logged_in()) {

		 	 redirect('auth/login', 'refresh');

		 }

		$this->data['title'] = 'Update Password ';
		$this->data['active_menu'] = 'update_password';
			
		$this->form_validation->set_rules('old_password', 'Old Password', 'required');
		$this->form_validation->set_rules('password', 'Password', 'required');
		$this->form_validation->set_rules('confirm_password', 'Confirm Password', 'required');
		// $this->form_validation->set_rules('phone', 'Phone', 'required');
		// $this->form_validation->set_rules('amount', 'Amount', 'required');

	
		if ($this->input->post()) {
			if ($this->form_validation->run()) {

			//$password=$this->input->post('password');
			

		 //$userid = $this->ion_auth->get_user_id();
           $identity = $this->session->userdata('identity');
		  //$identity = $this->ion_auth->get_user_id();
            $change = $this->ion_auth->change_password($identity, $this->input->post('old_password'), $this->input->post('password'));
            //print_r($change);die;
            if ($change) {
                //if the password was successfully changed
                // $this->prepare_flashmessage($this->ion_auth->messages(), 0);
                $this->session->set_flashdata('success_message', 'Password Updated Successfully.');
                redirect('crest/update_password', 'refresh');
                //$this->logout();
            } else {
                // $msg = $this->ion_auth->errors() . "The old password does not match.";
                // $this->prepare_flashmessage($msg, 1);
                // $this->prepare_flashmessage($this->ion_auth->errors(), 1);
                 $this->session->set_flashdata('success_message', 'The old password does not match.');
                redirect('crest/update_password', 'refresh');
            }

		  // if (is_numeric($userid)) {

				// $this->load->model('ion_auth_model');

		  // 	 $data['password'] = $this->ion_auth_model->hash_password($password);
		  
          
    //         $table = $this->db->dbprefix('users');
    //         $where['id'] = $userid;
    //         $this->base_model->update_operation($data, $table, $where);

             


          

    //     }
    }
}


        $this->data['content'] = "general/update_password";



		$this->_render_page('templates/template', $this->data);

	}


	public function upload_documents(){

		if (!$this->ion_auth->logged_in()) {

		 	 redirect('auth/login', 'refresh');

		 }

		$this->data['title'] = 'Upload Documents ';
		$this->data['active_menu'] = 'upload_documents';
			

		// $this->form_validation->set_rules('school_id_proof', 'School ID Proof', 'required');
		// $this->form_validation->set_rules('previous_year_marksheet', 'Previous Year Marksheet', 'required');	
		// $this->form_validation->set_rules('student_photograph', 'Student Photograph', 'required');
		// $this->form_validation->set_rules('phone', 'Phone', 'required');
		// $this->form_validation->set_rules('amount', 'Amount', 'required');


		if (!empty($_FILES['school_id_proof']['name']) || !empty($_FILES['previous_year_marksheet']['name']) || !empty($_FILES['student_photograph']['name'])) {
			// if ($this->form_validation->run()) {

			 $userid = $this->ion_auth->get_user_id();
			 $this->load->model('ion_auth_model');

		if (!empty($_FILES['school_id_proof']['name']))
		{
			$ext1 = explode('.', $_FILES['school_id_proof']['name']);
			$school_id_proof = $_FILES['school_id_proof']['name'];
			$newfilename1='sip_'.$userid.'.'.$ext1[1];
			$data['school_id_proof'] = $newfilename1;
			move_uploaded_file(
                $_FILES['school_id_proof']['tmp_name'], 'assets/uploads/user_details/' . $newfilename1
                    );
		}
		if (!empty($_FILES['previous_year_marksheet']['name']))
		{
		
		$ext2 = explode('.', $_FILES['previous_year_marksheet']['name']);
		$previous_year_marksheet = $_FILES['previous_year_marksheet']['name'];
		$newfilename2='pym_'.$userid.'.'.$ext2[1];
		$data['previous_year_marksheet'] = $newfilename2;
		 move_uploaded_file(
                $_FILES['previous_year_marksheet']['tmp_name'], 'assets/uploads/user_details/' . $newfilename2
                    );

		}

		if (!empty($_FILES['student_photograph']['name']))
		{

		$ext3 = explode('.', $_FILES['student_photograph']['name']);
		$student_photograph = $_FILES['student_photograph']['name'];
		$newfilename3='sp_'.$userid.'.'.$ext3[1];
		$data['student_photograph'] = $newfilename3;
		    move_uploaded_file(
                $_FILES['student_photograph']['tmp_name'], 'assets/uploads/user_details/' . $newfilename3
                    );



		}
			// $school_id_proof=$this->input->post('school_id_proof');
			// $previous_year_marksheet=$this->input->post('previous_year_marksheet');
			// $student_photograph=$this->input->post('student_photograph');
		
		  // if (is_numeric($userid)) {
		  
          
            $table = $this->db->dbprefix('users');
            $where['id'] = $userid;
            $this->base_model->update_operation($data, $table, $where);            
           
        
              $this->session->set_flashdata('success_message', 'Documents Uploaded Successfully.');
          

        // }
    // }
}

 $userid = $this->ion_auth->get_user_id();

		  if (is_numeric($userid)) {

		  	 $chk_user['id'] = $userid;
           $res = $this->base_model->fetch_records_from('users',$chk_user);
           $this->data['school_id_proof'] = $res[0]->school_id_proof;
           $this->data['previous_year_marksheet'] = $res[0]->previous_year_marksheet;
           $this->data['student_photograph'] = $res[0]->student_photograph;

		  	}


        $this->data['content'] = "general/upload_documents";



		$this->_render_page('templates/template', $this->data);

	}


    //Payment Process
    function payment($param1) {
        // , $param2=''
                $this->load->model('base_model');

        // date_default_timezone_set("Asia/Kolkata");
        // $relative_cat = array();
        // $table = $this->db->dbprefix('subcategories');
        // $condition['subcatid'] = $param2;
        // $examdetails = $this->base_model->fetch_records_from($table, $condition);
        // $buy_class = isset($_COOKIE['buy_class']) ? $_COOKIE['buy_class'] : '';
        // $subscription_info['class'] = $buy_class;
        // if (count($examdetails) <= 0)
            // redirect('user/payment');
        // $examdetails = $examdetails[0];
        $subscription_info['user_id'] = $this->session->userdata('user_id');
        // $subscription_info['quizid'] = $examdetails->subcatid;
        $price = $this->session->userdata('amount');
        // $newtable = $this->db->dbprefix('categories');
        // $newcondition['catid'] = $examdetails->catid;
        // $cource = $this->base_model->fetch_records_from(
                // $newtable, $newcondition);
        // $relative_cat = $this->session->userdata('discount_categories');
        // if (!empty($relative_cat)) {
            // $this->session->set_userdata('related_categories', $relative_cat);
        // }
        date_default_timezone_set("Asia/Kolkata");
        
        $subscription_info['status'] = 'Active';
        $subscription_info['dateofsubscription'] = date('Y-m-d H:i:s');
        //PAYMENT METHODS VALIDATION
        // if ($param1 == "ccavenue" && isset($param2) &&
                // $param2 != '' && is_numeric($param2)) {
        if($param1 == "ccavenue"){
            // $subscription_examname = array();
            // $this->session->set_userdata('subscription_data', $subscription_info);
            // $subscription_examname[] = $cource[0]->name . '/' . $examdetails->name;
            // $payment_info = $this->base_model->fetch_records_from(
            //         'paypal', array('status' => 'Active')
            // );
            $amount = $price;
            if (1) {
                // $payment_info = $payment_info[0];
                // $config['business'] = $payment_info->paypal_email;
                // $config['cpp_header_image'] = base_url() . "assets/uploads/paypal_logo/logo.jpg";
                $config['return'] = $returnUrl = base_url() . 'crest/payment_success';
                $config['cancel_return'] = $cancelUrl = base_url() . 'crest/payment_cancel';
                // $config['notify_url'] = ''; //'process_payment.php'; //IPN Post
                // $config['production'] = FALSE;
                // if ($payment_info->account_type != 'Sandbox')
                //     $config['production'] = TRUE;
                $coupon_discount = '';
                // $config['currency_code'] = $payment_info->currency_code;
                // $this->load->library('paypal', $config);
                // $this->paypal->add($cource[0]->name . '/' . $examdetails->name, $price);
                $amount = (float) $price;
                // var_dump($price);
                // exit();
                // if (!empty($relative_cat)) {
                //     foreach ($relative_cat as $val) {
                //         $relative_cat_arr = $this->base_model->fetch_records_from(
                //                 $this->db->dbprefix('subcategories'), array('subcatid' => $val));
                //         if (!empty($relative_cat_arr)) {
                //             $this->paypal->add($cource[0]->name . '/' . $relative_cat_arr->name, $relative_cat_arr[0]->price);
                //             $amount = $amount + (float) $relative_cat_arr[0]->price;
                //             $subscription_examname[] = $cource[0]->name . '/' . $relative_cat_arr[0]->name;
                //         }
                //     }
                // }
//                echo "<pre>";
//                print_r( $this->session->userdata('arr_selected_sub_categories_for_payment') ) ;
//                exit;
                // $this->load->model('category');
                // $amount = $this->category->getTotalAmount($this->session->userdata('arr_selected_sub_categories_for_payment'));
                /* Redeem Reward Points */
                // $this->load->model('Member');
                $user_id = $this->session->userdata('user_id');
                $result = $this->base_model->run_query("select username,home_address,city,state,pincode,country,phone,email FROM  users where id=" . $user_id);
                // if (!empty($userId)) {
                    // $rewardPoints = $this->Member->getRewardPoints($userId);
                    // $amount = $amount - $rewardPoints;
                // }
//                echo "<pre>";
//                print_r($subscription_info);
//                exit;
                /*                 * ************************** */
                // $this->session->set_userdata('subscription_examname', $subscription_examname);
                // $this->session->unset_userdata('discount_categories');
                //$this->paypal->pay(); //Proccess the payment
                $merchant_data = '';
                $order_id = $this->generateRandomString($user_id);
                $this->session->set_userdata('txn_id', $order_id);
                $working_key = '6E4C72802A8D5B27033D49B3B30BFDAA'; //Shared by CCAVENUES
                $access_code = 'AVBI78FF77BU15IBUB'; //Shared by CCAVENUES
                //$merchant_data = 'tid=&merchant_id=181092&order_id=' . $order_id . '&amount=' . $amount . '&currency=INR&redirect_url=' . $returnUrl . '&cancel_url=' . $cancelUrl . '&language=EN&billing_name=&billing_address=&billing_city=&billing_state=&billing_zip=&billing_country=&billing_tel=&billing_email=&delivery_name=&delivery_address=&delivery_city=&delivery_state=&delivery_zip=&delivery_country=&delivery_tel=&merchant_param1=&merchant_param2=&merchant_param3=&merchant_param4=&merchant_param5=&promo_code=&customer_identifier=&';
                 $merchant_data = 'tid=&merchant_id=181092&order_id=' . $order_id . '&amount=' . $amount . '&currency=INR&redirect_url=' . $returnUrl . '&cancel_url=' . $cancelUrl . '&language=EN&billing_name=' . $result[0]->username . '&billing_address=' . $result[0]->home_address . '&billing_city=' . $result[0]->city . '&billing_state=' . $result[0]->state . '&billing_zip=' . $result[0]->pincode . '&billing_country=' . $result[0]->country . '&billing_tel=' . $result[0]->phone . '&billing_email=' . $result[0]->email . '&delivery_name=&delivery_address=&delivery_city=&delivery_state=&delivery_zip=&delivery_country=&delivery_tel=&merchant_param1=&merchant_param2=&merchant_param3=&merchant_param4=&merchant_param5=&promo_code=&customer_identifier=&';
                $encrypted_data = $this->encrypt($merchant_data, $working_key);
                // echo $encrypted_data;
                // $encrypted_data2 = $this->encrypt2($merchant_data, $working_key);
                // echo $encrypted_data2;
                //     exit();

                echo '<html><body><form method="post" name="redirect" action="https://secure.ccavenue.com/transaction/transaction.do?command=initiateTransaction">
                            <input type=hidden name=encRequest value=' . $encrypted_data . '>
                            <input type=hidden name=access_code value=' . $access_code . '>
                            </form>
                            </center>';
                echo "<script language='javascript'>document.redirect.submit();</script></body></html>";
            } else {
                $this->prepare_flashmessage("Please contact admin for this payment gateway", 1);
                // $quizid = $subscriptioninfo['quizid'];
                //remove session data
                // $this->session->unset_userdata('subscription_data');
                // $this->session->unset_userdata('subscription_examname');
                // $this->session->unset_userdata('discount_amount');
                // redirect('user/instructions/' . $quizid, 'refresh');
                redirect('payment_success/', 'refresh');
            }
        }
        $this->prepare_flashmessage("Invalid request", 1);
        redirect('registration', 'refresh');
    }
    //Payment Success
    function payment_success() {
        $encResponse = isset($_REQUEST['encResp']) ? $_REQUEST['encResp'] : '';
        $rcvdString = $this->decrypt($encResponse, '6E4C72802A8D5B27033D49B3B30BFDAA');
//        echo "<pre>";
//        print_r($rcvdString);
//        exit;
//        
        if (empty($rcvdString)) {
            $this->prepare_flashmessage(
                    "Payment unsuccessful, We're sorry, but we are not able to process your payment due to system error.", 0);
            redirect('crest/payment_error/');
        }
        date_default_timezone_set("Asia/Kolkata");
                
        $decryptValues = explode('&', $rcvdString);
        $dataSize = sizeof($decryptValues);
        $decryptValues = array_values($decryptValues);
        $response = array();
        if (count($decryptValues) > 0) {
            foreach ($decryptValues as $value) {
                $arr = explode('=', $value);
                $response[$arr[0]] = $arr[1];
            }
        }
        for ($i = 0; $i < $dataSize; $i++) {
            $information = explode('=', $decryptValues[$i]);
            if ($i == 3)
                $order_status = $information[1];
        }
        $order_status_message = '';
        if ($order_status === "Success") {

        	// $table = $this->db->dbprefix('users');

        	// $updateStatus=  array('referral_code_status' => 1);
         //    $where['id'] = $this->session->userdata('user_id');
         //    $this->base_model->update_operation($updateStatus, $table, $where);

            $order_status_message = "Thank you for subscribing for CREST Olympiad Exam with us. Please note that your transaction is successful. You may visit https://www.crestolympiads.com/login and check dashboard for the details.";
        } else if ($order_status === "Aborted") {
            $order_status_message = "Thank you for shopping with us. We will keep you posted regarding the status of your order through e-mail";
        } else if ($order_status === "Failure") {
            $order_status_message = "Thank you for shopping with us. However, the transaction has been declined.";
        } else {
            $order_status_message = "Security Error. Illegal access detected";
        }
        $ccAvenueResponse = array(
            'cc_order_id' => isset($response['order_id']) ? $response['order_id'] : '',
            'cc_tracking_id' => isset($response['tracking_id']) ? $response['tracking_id'] : '',
            'cc_bank_ref_no' => isset($response['bank_ref_no']) ? $response['bank_ref_no'] : '',
            'cc_order_status' => isset($response['order_status']) ? $response['order_status'] : '',
            'cc_failure_message' => isset($response['failure_message']) ? $response['failure_message'] : '',
            'cc_payment_mode' => isset($response['payment_mode']) ? $response['payment_mode'] : '',
            'cc_card_name' => isset($response['card_name']) ? $response['card_name'] : '',
            'cc_status_code' => isset($response['status_code']) ? $response['status_code'] : '',
            'cc_status_message' => isset($response['status_message']) ? $response['status_message'] : '',
            'cc_amount' => isset($response['amount']) ? $response['amount'] : '',
            'cc_billing_name' => isset($response['billing_name']) ? $response['billing_name'] : '',
            'cc_billing_address' => isset($response['billing_address']) ? $response['billing_address'] : '',
            'cc_billing_city' => isset($response['billing_city']) ? $response['billing_city'] : '',
            'cc_billing_state' => isset($response['billing_state']) ? $response['billing_state'] : '',
            'cc_billing_zip' => isset($response['billing_zip']) ? $response['billing_zip'] : '',
            'cc_billing_country' => isset($response['billing_country']) ? $response['billing_country'] : '',
            'cc_billing_tel' => isset($response['billing_tel']) ? $response['billing_tel'] : '',
            'cc_billing_email' => isset($response['billing_email']) ? $response['billing_email'] : '',
            'cc_offer_type' => isset($response['offer_type']) ? $response['offer_type'] : '',
            'cc_offer_code' => isset($response['offer_code']) ? $response['offer_code'] : '',
            'cc_discount_value' => isset($response['discount_value']) ? $response['discount_value'] : '',
            'cc_mer_amount' => isset($response['mer_amount']) ? $response['mer_amount'] : '',
            'cc_response_code' => isset($response['response_code']) ? $response['response_code'] : '',
            'cc_order_status_message' => $order_status_message
        );
        $olympiadTransactionId = $this->session->userdata('txn_id');
        // $subcat_arr = array();
        // $related = array();
        // $examname = array();
        $user_id = $this->session->userdata('user_id');
        $subjects =  $this->session->userdata('subjects');
        // $where['id'] = $this->session->userdata('user_id');
        $this->load->model('base_model');
        $query = "SELECT * FROM `users` WHERE `id`='" . $user_id . "'";
        // echo $query;
        // exit();
        $usr_info_arr = $this->db->query($query)->row_array();
        $this_user = $this->db->query($query)->row();
        // $usr_info_arr = $this->base_model->fetch_records_from('users',$where);
        // $usr_info_arr = (array) $usr_info_arr[0];
        // $user
        /* Delete all reward points of this user */
        // $this->load->model('Member');
        $subscriptioninfo = array();
        $subscriptioninfo = $this->session->userdata('subscription_data');
        $subscriptioninfo['transaction_id'] = $olympiadTransactionId;
        $subscriptioninfo['payer_id'] = $user_id;
        $subscriptioninfo['payer_email'] = $usr_info_arr['email'];
        $subscriptioninfo['payer_name'] = $usr_info_arr['username'];
        $subscriptioninfo['user_id'] = $user_id;
        $subscriptioninfo['subjects'] = $subjects;
        // $subscriptioninfo['school_portal_id'] = $this->session->userdata('school_id_for_payment');
        
        // $this->session->set_userdata('school_id_for_payment',0);

        $transaction_id1 = $subscriptioninfo['transaction_id'];
        $payer_id1 = $subscriptioninfo['user_id'];
        $payer_email1 = $subscriptioninfo['payer_email'];
        $payer_name1 = $subscriptioninfo['payer_name'];

        if ($order_status === "Success" || strtolower($order_status) == "success") {
            // $examname = $this->session->userdata('subscription_examname');
            $subscriptioninfo['status'] = 'Active';
            $subscriptioninfo['dateofsubscription'] = date('Y-m-d H:i:s');


	        $mailParams = array('this_user' => $this_user);
	    	$this->load->model('Emails_model');
    		if(!$this->Emails_model->sendPaymentSuccessMail($usr_info_arr['email'], $mailParams)) {
	    	
	    	}

            
            $userId = $this->session->userdata('user_id');
            // if (!empty($userId)) {
            //     $this->Member->deleteRewardPoints($userId);
            // }
            $this->load->model('base_model');
            // $res = $this->base_model->insert_operation($subscriptioninfo, 'payments');
            $res = $this->base_model->insert_operation('payments', $subscriptioninfo);
            
            // $related = $this->session->userdata('related_categories');
            // if (!empty($related)) {
            //     foreach ($related as $val) {
            //         if ($val != 0) {
            //             $this->base_model->insert_operation(array('user_id' => $this->ion_auth->user()->row()->id,
            //                 'quizid' => $val, 'class' => $usr_info_arr['class'], 'status' => 'Active', 'dateofsubscription' => date('Y-m-d H:i:s'),
            //                 // 'school_portal_id' => $subscriptioninfo['school_portal_id'],
            //                 'transaction_id' => $transaction_id1,
            //                 'payer_id'=> $payer_id1, 
            //                 'payer_email' => $payer_email1, 
            //                 'payer_name'=> $payer_name1), 'prosubscriptions');
            //         }
            //     }
            // }
            // $exam_nm = '';
            // if (!empty($examname)) {
            //     foreach ($examname as $val) {
            //         $exam_nm .= $val . '<br>';
            //     }
            // }
            // $quizid = $subscriptioninfo['quizid'];
            // $quiz_arr = $this->db->query("SELECT `slug` FROM `subcategories` WHERE `subcatid`='" . $quizid . "'")->row_array();
            // $slug = $quiz_arr['slug'];
            //remove session data
            // $this->session->unset_userdata('subscription_data');
            // $this->session->unset_userdata('subscription_examname');
            // $this->session->unset_userdata('coupon_discount');
            // $this->session->unset_userdata('txn_id');
            // $this->session->unset_userdata('discount_amount');
            $this->session->set_userdata('payment_response', 'true');
            // redirect('user/instructions/' . $slug, 'refresh');
            /* Update CC Avenue response */
            $table = $this->db->dbprefix('payments');
            $where['transaction_id'] = $olympiadTransactionId;
            $this->base_model->update_operation($ccAvenueResponse, $table, $where);
            /*             * ************************ */
            $this->prepare_flashmessage(
                    "Payment has been received Successfully.", 0
            );
            
            redirect('crest/paymentconfirmation/');
        } else {
            $ccAvenueResponse['transaction_id'] = $subscriptioninfo['transaction_id'];
            $ccAvenueResponse['payer_id'] = $subscriptioninfo['payer_id'];
            $ccAvenueResponse['payer_email'] = $subscriptioninfo['payer_email'];
            $ccAvenueResponse['payer_name'] = $subscriptioninfo['payer_name'];
            $ccAvenueResponse['user_id'] = $subscriptioninfo['user_id'];
            /* Insert CC Avenue response */
            $this->load->model('base_model');
            // $this->base_model->insert_operation($ccAvenueResponse, 'payments');
            $this->base_model->insert_operation('payments',$ccAvenueResponse);
            /*             * ****************************** */
            redirect('crest/payment_error/');
        }
    }
    
    function paymentconfirmation() {
        // $this->prepare_flashmessage("Payment Confirmed!", 0);
//        if($this->session->userdata('txn_id') == '') {
//           redirect('user');
//        }
        // $this->data['content'] = 'user/payment/confirmation';
        $payment_conf = $this->session->userdata('payment_response');
        $txn_id = $this->session->userdata('txn_id');
        if(isset($txn_id) && isset($payment_conf)){
        	if($payment_conf != 'true'){
        		redirect(base_url());
        	}
        	$data['id'] = $this->session->userdata('user_id');
	    	$res = $this->base_model->fetch_records_from('users',$data);
	        $this->data['this_user'] = $res[0];
	        $this->data['txn_id'] = $this->session->userdata('txn_id');
	        $this->session->unset_userdata('txn_id');
	        $this->session->unset_userdata('payment_response');
	        // $this->data['']
	        // redirect('successful_registration');

	        $table = $this->db->dbprefix('users');

        	$updateStatus=  array('referral_code_status' => 1);
            $where['id'] = $this->session->userdata('user_id');
            $this->base_model->update_operation($updateStatus, $table, $where);

            $referrer_id = $this->session->userdata('referrer_id');

            $subjects=$this->session->userdata('subjects');
			$amount=$this->session->userdata('amount');

			$subjects=rtrim($subjects,',');

     if ($this->ion_auth->logged_in())
     {

 			  $userid = $this->ion_auth->get_user_id();

           //$chk_user['id'] = $userid;
            $result = $this->base_model->run_query("select * FROM  user_transaction_details where user_id=" . $userid." order by id DESC limit 1");

        $transaction_date=date('Y-m-d H:i:s');
						$transaction_status=1;

						$referrer_id=0;

						// if(!empty($result[0]->max_wallet_amount) && !empty($result[0]->wallet_amount))
						// {
						// 	$max_wallet_amount=0;
						// }
						// else
						// {
							$max_wallet_amount=$result[0]->max_wallet_amount-$result[0]->wallet_amount+$amount;
						// }
						

						// if(!empty($result[0]->wallet_amount))
						// {
						// $wallet_amount=$amount;
						// }

						// else

						// {
							$wallet_amount=0;	
						// }

						 $table1 = $this->db->dbprefix('user_transaction_details');
						


							$transactionParams = array('user_id' => $userid, 'referrer_id' => $referrer_id ,'preferred_subjects' => $subjects,'transaction_amount' => $amount, 'max_wallet_amount' => $max_wallet_amount, 'wallet_amount' => $wallet_amount,'transaction_date' => $transaction_date,'transaction_status' => $transaction_status);						

						$this->base_model->insert_operation($table1,$transactionParams);

            
		}

            else if(!empty($referrer_id))
            {

             $table1 = $this->db->dbprefix('user_transaction_details');

						$where1 = array("user_id" => $referrer_id);

						$transaction_details = $this->base_model->fetch_records_from($table1,$where1);
						
						 //print_r($transaction_details);die;


						$wallet_amount=$transaction_details[0]->wallet_amount;

						$max_wallet_amount=$transaction_details[0]->max_wallet_amount;

						if($transaction_details[0]->max_wallet_amount<$amount)
						{
							$ref_amount=$transaction_details[0]->max_wallet_amount;
						}
						else
						{
							$ref_amount=$amount;
						}

						if ($transaction_details[0]->wallet_amount<$transaction_details[0]->max_wallet_amount) {
							# code...

							//$referer_wallet_amount=$transaction_details[0]->wallet_amount+$amount;

							$referer_wallet_amount=$ref_amount;
						}

						else

						{
							$referer_wallet_amount=$transaction_details[0]->wallet_amount;
						}



						// $transaction_params = array('wallet_amount' => $referer_wallet_amount);
						$transaction_date=date('Y-m-d H:i:s');
						$transaction_status=1;

						//$transaction_amount=$amount;


						


							$transactionParams1 = array('user_id' => $res[0]->id, 'referrer_id' => $referrer_id ,'preferred_subjects' => $subjects, 'transaction_amount' => $amount, 'max_wallet_amount' => $amount, 'wallet_amount' => 0,'transaction_date' => $transaction_date,'transaction_status' => $transaction_status);

							$transactionParams2 = array('user_id' => $referrer_id, 'referrer_id' => 0 ,'preferred_subjects' => 0, 'transaction_amount' => 0, 'max_wallet_amount' => $max_wallet_amount, 'wallet_amount' => $referer_wallet_amount,'transaction_date' => $transaction_date,'transaction_status' => $transaction_status);

						

						$this->base_model->insert_operation($table1,$transactionParams1);
						$this->base_model->insert_operation($table1,$transactionParams2);

						// $transaction_details = $this->base_model->fetch_records_from($table,$where1);

						// $wallet_amount=$this->input->post('wallet_amount');

						// $max_wallet_amount=$transaction_details[0]->max_wallet_amount+$amount;

						// $wallet_amount=$transaction_details[0]->wallet_amount-$wallet_amount;


						// $transactionParams = array('user_id' => $res[0]->id, 'referrer_id' => $referrer_id ,'preferred_subjects' => $subjects, 'max_wallet_amount' => $max_wallet_amount, 'wallet_amount' => $wallet_amount,'transaction_date' => $transaction_date,'transaction_status' => $transaction_status);

						

						// $transaction_Details = $this->base_model->update_operation($transactionParams,$table,$where1);

					}

					else
					{
						$transaction_date=date('Y-m-d H:i:s');
						$transaction_status=1;

						$referrer_id=0;
						$transaction_amount=$amount;
						$max_wallet_amount=$amount;
						$wallet_amount=0;

						 $table1 = $this->db->dbprefix('user_transaction_details');
						


							$transactionParams = array('user_id' => $res[0]->id, 'referrer_id' => $referrer_id ,'preferred_subjects' => $subjects, 'transaction_amount' => $transaction_amount, 'max_wallet_amount' => $max_wallet_amount, 'wallet_amount' => $wallet_amount,'transaction_date' => $transaction_date,'transaction_status' => $transaction_status);

						

						$this->base_model->insert_operation($table1,$transactionParams);
					}

					$this->data['referral_code'] = $res[0]->referral_code;



	        $this->data['content'] = 'buy/success_registration';
        }else{
        	redirect(base_url());
        }
        // $route['my-photos'] = "user/myphotos";

        // $this->layout();
		$this->_render_page('templates/template', $this->data);

        // $this->_render_page('temp/usertemplate');
    }
    function payment_error() {
        // $this->data['content'] = 'user/payment/error';
        $this->prepare_flashmessage("Payment Error", 1);

        $this->data['errorMessage'] = $this->session->userdata('txn_id');
        $this->session->unset_userdata('txn_id');
        // redirect('failed_registration');
        $data['id'] = $this->session->userdata('user_id');
    	$res = $this->base_model->fetch_records_from('users',$data);
        $this->data['this_user'] = $res[0];
        $this->data['content'] = 'buy/failed_registration';
		$this->_render_page('templates/template', $this->data);

        // $this->content = 'auth/my-photos';
        // $this->layout();
        // $this->_render_page('temp/usertemplate');
    }
    //Payment Cancel
    function payment_cancel() {
        // $subscriptioninfo = $this->session->userdata('subscription_data');
        // $examname = $this->session->userdata('subscription_examname');
        // $subscriptioninfo['transaction_id'] = $this->session->userdata('txn_id');
        // $exam_nm = '';
        // if (!empty($examname)) {
        //     foreach ($examname as $val) {
        //         $exam_nm .= $val . '<br>';
        //     }
        // }
        $data['id'] = $this->session->userdata('user_id');
    	$res = $this->base_model->fetch_records_from('users',$data);
        $this->data['this_user'] = $res[0];
        $this->prepare_flashmessage("Payment Cancelled", 1);
        // $quizid = $subscriptioninfo['quizid'];
        // $coupon_id = $this->session->userdata('coupon_discount');
        // if ($coupon_id) {
        //     $attr['status'] = '0';
        //     $table = $this->db->dbprefix('coupons');
        //     $where['coupon_id'] = $userid;
        //     $this->base_model->update_operation($attr, $table, $where);
        // }
        // $quiz_arr = $this->db->query("SELECT `slug` FROM `subcategories` WHERE `subcatid`='" . $quizid . "'")->row_array();
        // $slug = $quiz_arr['slug'];
        //remove session data
        // $this->session->unset_userdata('subscription_data');
        // $this->session->unset_userdata('subscription_examname');
        // $this->session->unset_userdata('coupon_discount');
        $this->session->unset_userdata('txn_id');
        // $this->session->unset_userdata('discount_amount');
        $this->session->set_userdata('payment_response', 'false');

        $this->data['content'] = 'buy/payment_cancelled';
		$this->_render_page('templates/template', $this->data);
        // redirect('failed_registration');

        // $this->content = 'auth/my-photos';
        // $this->layout();
        // redirect('user/profile', 'refresh');
    }

    //payment function ends ------------------------------------------------------------

	public function coordinator(){

		$this->data['title'] = 'Become a Co-ordinator';
		$this->data['active_menu'] = 'coord';

		// $this->load->model('contact');
		$this->load->model('Contact');
		$this->load->helper('captcha');

		$this->form_validation->set_error_delimiters('<div class="error">', '</div>');
		$this->form_validation->set_rules('name', 'Contact Person', 'required|min_length[3]|max_length[75]');
		$this->form_validation->set_rules('email', 'Email', 'required|valid_email|max_length[75]');
		$this->form_validation->set_rules('message', 'Message', 'max_length[300]');
		$this->form_validation->set_rules('userCaptcha', 'Captcha', 'required|callback_check_captcha');
        
        $userCaptcha = $this->input->post('userCaptcha');


		if ($this->form_validation->run()) {
			if ($this->input->post()) {
				//$data = $this->input->post();

				$data['name'] = $this->input->post('name');
				$data['phone'] = $this->input->post('phone');
				$data['email'] = $this->input->post('email');
				$data['message'] = $this->input->post('message');
				$data['query_type']  = $this->input->post('query_type'); 
				$data['ip_address'] = $_SERVER['REMOTE_ADDR'];
				$data['date'] = date('Y-m-d H:i:s');
				$intLastInsertId = $this->Contact->add($data);

				if(!empty($intLastInsertId)) {
					$this->session->set_flashdata('success_message', 'Thanks! We\'ll get back to you as soon as possible.');
				} else {
					$this->session->set_flashdata('error_message', 'It seems some problem has occured, Please contact us at .'.$this->config->item('support_phone'),1);
				}
			}
		}

		$random_number = substr(number_format(time() * rand(), 0, '', ''), 0, 6);
        $vals = array(
            'word' => $random_number,
            'img_path' => './assets/captcha/',
            'img_url' => base_url() . 'assets/captcha/',
            'img_width' => 140,
            'img_height' => 32,
            'expiration' => 7200
        );
        $this->data['captcha'] = create_captcha($vals);
        $this->session->set_userdata('captchaWord', $this->data['captcha']['word']);


		$this->data['content'] = "general/become_a_coord";
		$this->_render_page('templates/template', $this->data);
	}

	  public function check_captcha($str) {
        $word = $this->session->userdata('captchaWord');
        if (strcmp(strtoupper($str), strtoupper($word)) == 0) {
            return true;
        } else {
            $this->form_validation->set_message('check_captcha', 'Please enter correct words!');
            return false;
        }
    }

	public function subscribe_email(){

		// $product_table = $this->all_tables['products'];
		// $cat_table = $this->all_tables['categories'];
        $email = $this->input->post('email');
        if(empty($email)) {
            echo json_encode(array('success' => false, 'msg' => 'Please enter your email ID.'));
            exit;
        }
        if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
            echo json_encode(array('success' => false, 'msg' => 'Please enter a valid email address.'));
            exit;
        }
        $this->load->model('Contact');
        
        $this->Contact->NewsletterSubscribe($email);
        echo json_encode(array('success' => true, 'msg' => 'Thank you for subscribing to the CREST Olympiads Newsletter!'));
        exit;
	}

	public function about(){
		
		$this->data['title'] = 'About Us';
		$this->data['active_menu'] = 'about';

		$this->data['content'] = "general/about";
		$this->_render_page('templates/template', $this->data);
	}

	public function faqs(){
		
		$this->data['title'] = 'FAQs';
		$this->data['active_menu'] = 'about';
		$order_by="id ASC";
	

		$questions = $this->base_model->fetch_records_from('faqs','','*',$order_by);
		$this->data['questions'] = $questions;

		$this->data['content'] = "general/faqs";
		$this->_render_page('templates/template', $this->data);
	}

	public function downloads(){
		
		$this->data['title'] = 'Downloads';
		$this->data['active_menu'] = 'downloads';

		$this->data['meta_description'] = 'Downloads for CREST Olympiads';
		$this->data['title'] = 'Downloads for CREST Olympiads';

		$this->data['content'] = "general/downloads";
		$this->_render_page('templates/template', $this->data);
	}

	

	public function blog(){

		$product_table = $this->all_tables['products'];
		$cat_table = $this->all_tables['categories'];
		$this->load->helper('text');
		
		// $this->data['navbar_products'] = $this->get_navbar_products();
		$this->data['categories'] = $this->base_model->get_details($cat_table);

		$this->data['navbar_products'] = $this->get_navbar_products();
		$this->data['categories'] = $this->base_model->get_details($cat_table);


		
		$this->data['title'] = 'Blog';
		$this->data['active_menu'] = 'blog';
		$this->data['articles'] = $this->db->query("SELECT * FROM `blog`")->result_array();

		$slug = $this->uri->segment(2);
		if($slug != ''){
			$article = $this->db->query("SELECT * FROM `blog` WHERE slug like '".$slug."'")->row_array();

			if($article){
				$this->data['article'] = $article;
				$this->data['title'] = $article['title'];
				$this->data['meta_title'] = $article['meta_keywords'];
				$this->data['meta_description'] = $article['meta_description'];
				$this->data['content'] = "blog/page";
				$this->_render_page('templates/template', $this->data);
				// exit();
			}
			else{
				$this->data['content'] = "blog/index";
				$this->_render_page('templates/template', $this->data);
			}
			// var_dump($article);
			// exit();
		}
		else{
			$this->data['content'] = "blog/index";
			$this->_render_page('templates/template', $this->data);
		}
	}


    public function generateRandomString($user_id, $length = 10) {
        $characters = '0123456789';
        $charactersLength = strlen($characters);
        $randomString = $user_id;
        for ($i = 0; $i < $length; $i++) {
            $randomString .= $characters[rand(0, $charactersLength - 1)];
        }
        return $randomString;
    }

    public function encrypt($plainText, $key) {

        $key = $this->hextobin(md5($key));
        $initVector = pack("C*", 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f);
        $openMode = openssl_encrypt($plainText, 'AES-128-CBC', $key, OPENSSL_RAW_DATA, $initVector);
        $encryptedText = bin2hex($openMode);
        return $encryptedText;
    }
    public function decrypt($encryptedText, $key) {

        $key = $this->hextobin(md5($key));
        $initVector = pack("C*", 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f);
        $encryptedText = $this->hextobin($encryptedText);
        $decryptedText = openssl_decrypt($encryptedText, 'AES-128-CBC', $key, OPENSSL_RAW_DATA, $initVector);
        return $decryptedText;
    }

    //********** Hexadecimal to Binary function for php 4.0 version ********
    public function hextobin($hexString) {
        $length = strlen($hexString); 
        $binString="";   
        $count=0; 
        while($count<$length) 
        {       
            $subString =substr($hexString,$count,2);           
            $packedString = pack("H*",$subString); 
            if ($count==0)
        {
            $binString=$packedString;
        } 
            
        else 
        {
            $binString.=$packedString;
        } 
            
        $count+=2; 
        } 
        return $binString; 
    }


}
